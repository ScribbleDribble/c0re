
process management: 
- swap out process address space on context switch 
- implement proper scheduler 
- testing for an arbitrary amount processes
- fix kernel stack from gradually falling in address space due to context switching  
- refactor

system calls:
- complete stdio interface 
- cleaner interface - look into other kernel designs 

kmalloc/malloc
- seperate user and kernel heaps - implement malloc for userspace programs

vmm
- stricter permissions for kernel code segments 
- *long term* Remap kernel to start at higher memory (0xC0000...) like linux
- *long term* code to obtain memory map
- palloc option for heap to go downwards
- set kernel binary permissions as non writable. make sure kernel stack is outside of this region. need to set THAT bit in cr0 again
    - the above two points are important because we could override kernel code section if we allocate >4kb of memory atm

pmm 
- Increase available heap memory to 256MB
- add tests. ensure initialisation, bitmap array, allocation and freeing are correct

trap.c 
- merge idt.c, isr.c, irq.c


cleaner Makefile

Future: qemu e2e tests. Dump logs from qemu and read data using python testing script. 
E.g. check state of registers from log file. Must use:



// todo when cloning process, use saved register state from parent process 